/*
 * Skyflow
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

import {V1CreatePolicyRequest} from '../model/V1CreatePolicyRequest';
import {V1CreatePolicyResponse} from '../model/V1CreatePolicyResponse';
import {V1DeletePolicyResponse} from '../model/V1DeletePolicyResponse';
import {V1GetPolicyResponse} from '../model/V1GetPolicyResponse';
import {V1UpdatePolicyRequest} from '../model/V1UpdatePolicyRequest';
import {V1UpdatePolicyResponse} from '../model/V1UpdatePolicyResponse';

/**
* Policies service.
* @module api/PoliciesApi
* @version v1
*/
const PoliciesApi = {


    /**
     * Callback function to receive the result of the createPolicy operation.
     * @callback module:api/PoliciesApi~createPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CreatePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Policy
     * Creates a Policy by using Information provided in Request
     * @param {module:model/V1CreatePolicyRequest} body 
     * @param {module:api/PoliciesApi~createPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CreatePolicyResponse}
     */
    createPolicy(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPolicy");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1CreatePolicyResponse;

      return this.callApi(
        '/v1/policies', 'POST',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the deletePolicy operation.
     * @callback module:api/PoliciesApi~deletePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1DeletePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Policy
     * Deletes a Policy
     * @param {String} ID 
     * @param {module:api/PoliciesApi~deletePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1DeletePolicyResponse}
     */
    deletePolicy(ID, callback) {
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling deletePolicy");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1DeletePolicyResponse;

      return this.callApi(
        '/v1/policies/{ID}', 'DELETE',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the getPolicy operation.
     * @callback module:api/PoliciesApi~getPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Policy By ID
     * Retreives a Policy by Provided ID.
     * @param {String} ID 
     * @param {module:api/PoliciesApi~getPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetPolicyResponse}
     */
    getPolicy(ID, callback) {
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling getPolicy");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetPolicyResponse;

      return this.callApi(
        '/v1/policies/{ID}', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the searchPoliciesByFilter operation.
     * @callback module:api/PoliciesApi~searchPoliciesByFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Policies
     * Streams Policies which matches the conditions set in query parameters and using Information from Additional Resource Headers or fallsback to Access Token
     * @param {String} policyResourceID Resource ID. Resource to which policies are being defined
     * @param {module:model/String} policyResourceType Resource Type. Type of a Resource being Defined   - NONE: is undefined and should not be used.  - ORGANIZATION: Indicates the Resource Type to be Organization.  - VAULT: Indicates the Resource Type to be Vault.  - NOTEBOOK: Indicates the Resource Type to be Notebook.
     * @param {String} policyActorID Actor ID. Actor for whom policies are being defined
     * @param {module:model/String} policyActorType Actor Type. Type of an Actor being Defined   - NONE: is undefined and should not be used.  - USER: Indicates the Actor for Policy mapping is User.  - APPLICATION: Indicates the Actor for Policy mapping is Application.
     * @param {Array.<module:model/String>} policyPermissions Permissions. List of applicable permissions for given resource   - NONE: is undefined and should not be used.  - VIEWER: has Read-Only Permissions to the Resource.  - ADMIN: has Administrative Permissions to the Resource.  - DEVELOPER: has access to Modify the Data but not Manage the Resource Settings.
     * @param {Object} opts Optional parameters
     * @param {String} opts.offset Pagination Offset.  - indicates from which record number to start retrieving data (default to 0)
     * @param {String} opts.limit Pagination Limit.  - indicates how many records to retrieve (default to 100)
     * @param {String} opts.policyID ID of this Policy. This will be generated by Server and cannot be user generated
     * @param {module:api/PoliciesApi~searchPoliciesByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetPolicyResponse}
     */
    searchPoliciesByFilter(policyResourceID, policyResourceType, policyActorID, policyActorType, policyPermissions, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'policyResourceID' is set
      if (policyResourceID === undefined || policyResourceID === null) {
        throw new Error("Missing the required parameter 'policyResourceID' when calling searchPoliciesByFilter");
      }

      // verify the required parameter 'policyResourceType' is set
      if (policyResourceType === undefined || policyResourceType === null) {
        throw new Error("Missing the required parameter 'policyResourceType' when calling searchPoliciesByFilter");
      }

      // verify the required parameter 'policyActorID' is set
      if (policyActorID === undefined || policyActorID === null) {
        throw new Error("Missing the required parameter 'policyActorID' when calling searchPoliciesByFilter");
      }

      // verify the required parameter 'policyActorType' is set
      if (policyActorType === undefined || policyActorType === null) {
        throw new Error("Missing the required parameter 'policyActorType' when calling searchPoliciesByFilter");
      }

      // verify the required parameter 'policyPermissions' is set
      if (policyPermissions === undefined || policyPermissions === null) {
        throw new Error("Missing the required parameter 'policyPermissions' when calling searchPoliciesByFilter");
      }


      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'policy.resource.ID': policyResourceID,
        'policy.resource.type': policyResourceType,
        'policy.actor.ID': policyActorID,
        'policy.actor.type': policyActorType,
        'policy.permissions': this.buildCollectionParam(policyPermissions, 'multi'),
        'policy.ID': opts['policyID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetPolicyResponse;

      return this.callApi(
        '/v1/policies', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the updatePolicy operation.
     * @callback module:api/PoliciesApi~updatePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1UpdatePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Policy
     * Updates a Policy by Provided ID.
     * @param {String} ID 
     * @param {module:model/V1UpdatePolicyRequest} body 
     * @param {module:api/PoliciesApi~updatePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1UpdatePolicyResponse}
     */
    updatePolicy(ID, body, callback) {
      let postBody = body;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updatePolicy");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePolicy");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1UpdatePolicyResponse;

      return this.callApi(
        '/v1/policies/{ID}', 'PUT',
        pathParams, postBody,
        returnType, callback
      );
    },


}
export default PoliciesApi

