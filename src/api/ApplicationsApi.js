/*
 * Skyflow
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

import {V1CreateApplicationRequest} from '../model/V1CreateApplicationRequest';
import {V1CreateApplicationResponse} from '../model/V1CreateApplicationResponse';
import {V1DeleteApplicationResponse} from '../model/V1DeleteApplicationResponse';
import {V1GetApplicationResponse} from '../model/V1GetApplicationResponse';
import {V1RevealApplicationSecretResponse} from '../model/V1RevealApplicationSecretResponse';
import {V1UpdateApplicationRequest} from '../model/V1UpdateApplicationRequest';
import {V1UpdateApplicationResponse} from '../model/V1UpdateApplicationResponse';

/**
* Applications service.
* @module api/ApplicationsApi
* @version v1
*/
const ApplicationsApi = {


    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/ApplicationsApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CreateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Application
     * Creates a new Application
     * @param {module:model/V1CreateApplicationRequest} body 
     * @param {module:api/ApplicationsApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CreateApplicationResponse}
     */
    createApplication(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApplication");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1CreateApplicationResponse;

      return this.callApi(
        '/v1/applications', 'POST',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/ApplicationsApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1DeleteApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Application
     * Deletes an Application by Provided ID
     * @param {String} ID 
     * @param {module:api/ApplicationsApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1DeleteApplicationResponse}
     */
    deleteApplication(ID, callback) {
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling deleteApplication");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1DeleteApplicationResponse;

      return this.callApi(
        '/v1/applications/{ID}', 'DELETE',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the getApplication operation.
     * @callback module:api/ApplicationsApi~getApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Application By ID
     * Retreives an Application by Provided ID
     * @param {String} ID 
     * @param {module:api/ApplicationsApi~getApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetApplicationResponse}
     */
    getApplication(ID, callback) {
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling getApplication");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetApplicationResponse;

      return this.callApi(
        '/v1/applications/{ID}', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the revealApplicationSecret operation.
     * @callback module:api/ApplicationsApi~revealApplicationSecretCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1RevealApplicationSecretResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reveals Application Secret
     * This allows the user to look at the Application's secret for the given Application ID
     * @param {String} ID 
     * @param {module:api/ApplicationsApi~revealApplicationSecretCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1RevealApplicationSecretResponse}
     */
    revealApplicationSecret(ID, callback) {
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling revealApplicationSecret");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1RevealApplicationSecretResponse;

      return this.callApi(
        '/v1/applications/{ID}/reveal', 'POST',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the searchApplicationsByFilter operation.
     * @callback module:api/ApplicationsApi~searchApplicationsByFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Applications
     * Streams Applications which matches the conditions set in query parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.offset Pagination Offset.  - indicates from which record number to start retrieving data (default to 0)
     * @param {String} opts.limit Pagination Limit.  - indicates how many records to retrieve (default to 100)
     * @param {module:api/ApplicationsApi~searchApplicationsByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetApplicationResponse}
     */
    searchApplicationsByFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetApplicationResponse;

      return this.callApi(
        '/v1/applications', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/ApplicationsApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1UpdateApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Application
     * Updates an Application by Provided ID
     * @param {String} ID 
     * @param {module:model/V1UpdateApplicationRequest} body 
     * @param {module:api/ApplicationsApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1UpdateApplicationResponse}
     */
    updateApplication(ID, body, callback) {
      let postBody = body;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updateApplication");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApplication");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1UpdateApplicationResponse;

      return this.callApi(
        '/v1/applications/{ID}', 'PUT',
        pathParams, postBody,
        returnType, callback
      );
    },


}
export default ApplicationsApi

