/*
 * Skyflow
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

import {V1CreateTokenRequest} from '../model/V1CreateTokenRequest';
import {V1CreateTokenResponse} from '../model/V1CreateTokenResponse';
import {V1DeleteTokenResponse} from '../model/V1DeleteTokenResponse';
import {V1GetTokenResponse} from '../model/V1GetTokenResponse';
import {V1UpdateTokenRequest} from '../model/V1UpdateTokenRequest';
import {V1UpdateTokenResponse} from '../model/V1UpdateTokenResponse';

/**
* Tokens service.
* @module api/TokensApi
* @version v1
*/
const TokensApi = {


    /**
     * Callback function to receive the result of the createToken operation.
     * @callback module:api/TokensApi~createTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CreateTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Token
     * Creates a Token by using Notebook Information from body
     * @param {module:model/V1CreateTokenRequest} body 
     * @param {module:api/TokensApi~createTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CreateTokenResponse}
     */
    createToken(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createToken");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1CreateTokenResponse;

      return this.callApi(
        '/v1/tokens', 'POST',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/TokensApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1DeleteTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Token
     * Deletes Token belonging to ID.
     * @param {String} tokenID 
     * @param {module:api/TokensApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1DeleteTokenResponse}
     */
    deleteToken(tokenID, callback) {
      let postBody = null;

      // verify the required parameter 'tokenID' is set
      if (tokenID === undefined || tokenID === null) {
        throw new Error("Missing the required parameter 'tokenID' when calling deleteToken");
      }


      let pathParams = {
        'tokenID': tokenID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1DeleteTokenResponse;

      return this.callApi(
        '/v1/tokens/{tokenID}', 'DELETE',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/TokensApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Token By ID
     * Retreives Token belonging to ID.
     * @param {String} tokenID 
     * @param {module:api/TokensApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetTokenResponse}
     */
    getToken(tokenID, callback) {
      let postBody = null;

      // verify the required parameter 'tokenID' is set
      if (tokenID === undefined || tokenID === null) {
        throw new Error("Missing the required parameter 'tokenID' when calling getToken");
      }


      let pathParams = {
        'tokenID': tokenID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetTokenResponse;

      return this.callApi(
        '/v1/tokens/{tokenID}', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the updateToken operation.
     * @callback module:api/TokensApi~updateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1UpdateTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Token
     * Updates Token belonging to ID.
     * @param {String} tokenID 
     * @param {module:model/V1UpdateTokenRequest} body 
     * @param {module:api/TokensApi~updateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1UpdateTokenResponse}
     */
    updateToken(tokenID, body, callback) {
      let postBody = body;

      // verify the required parameter 'tokenID' is set
      if (tokenID === undefined || tokenID === null) {
        throw new Error("Missing the required parameter 'tokenID' when calling updateToken");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateToken");
      }


      let pathParams = {
        'tokenID': tokenID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1UpdateTokenResponse;

      return this.callApi(
        '/v1/tokens/{tokenID}', 'PUT',
        pathParams, postBody,
        returnType, callback
      );
    },


}
export default TokensApi

