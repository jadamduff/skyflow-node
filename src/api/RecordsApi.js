/*
 * Skyflow
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

import {StreamResultOfV1QueryResponse} from '../model/StreamResultOfV1QueryResponse';
import {V1CreateRecordRequest} from '../model/V1CreateRecordRequest';
import {V1CreateRecordResponse} from '../model/V1CreateRecordResponse';
import {V1DeleteRecordResponse} from '../model/V1DeleteRecordResponse';
import {V1GetRecordResponse} from '../model/V1GetRecordResponse';
import {V1QueryRequest} from '../model/V1QueryRequest';
import {V1UpdateRecordRequest} from '../model/V1UpdateRecordRequest';
import {V1UpdateRecordResponse} from '../model/V1UpdateRecordResponse';

/**
* Records service.
* @module api/RecordsApi
* @version v1
*/
const RecordsApi = {


    /**
     * Callback function to receive the result of the deleteRecord operation.
     * @callback module:api/RecordsApi~deleteRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1DeleteRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Record
     * Deletes a Record by using ID and Notebook Information from Request.
     * @param {String} ID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.notebookID Notebook ID Under which this resource should be deleted.
     * @param {module:api/RecordsApi~deleteRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1DeleteRecordResponse}
     */
    deleteRecord(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling deleteRecord");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'notebookID': opts['notebookID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1DeleteRecordResponse;

      return this.callApi(
        '/v1/records/{ID}', 'DELETE',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the getRecord operation.
     * @callback module:api/RecordsApi~getRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Record
     * Retrieves a Record by using ID and Notebook Information from Request.
     * @param {String} ID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.notebookID Notebook ID Under which this resource should be retrieved.
     * @param {module:api/RecordsApi~getRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetRecordResponse}
     */
    getRecord(ID, opts, callback) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling getRecord");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
        'notebookID': opts['notebookID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetRecordResponse;

      return this.callApi(
        '/v1/records/{ID}', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the insertRecord operation.
     * @callback module:api/RecordsApi~insertRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CreateRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Record
     * Creates a Record by using Notebook Information from Request and Post Body
     * @param {module:model/V1CreateRecordRequest} body 
     * @param {module:api/RecordsApi~insertRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CreateRecordResponse}
     */
    insertRecord(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling insertRecord");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1CreateRecordResponse;

      return this.callApi(
        '/v1/records', 'POST',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the query operation.
     * @callback module:api/RecordsApi~queryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResultOfV1QueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Records
     * Retrieves list of Records by using Notebook Information from Request and Post Body
     * @param {module:model/V1QueryRequest} body 
     * @param {module:api/RecordsApi~queryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamResultOfV1QueryResponse}
     */
    query(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling query");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StreamResultOfV1QueryResponse;

      return this.callApi(
        '/v1/query', 'POST',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the updateRecord operation.
     * @callback module:api/RecordsApi~updateRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1UpdateRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Record
     * Updates a Record by using ID, Notebook Information from Request and Put Body
     * @param {String} ID 
     * @param {module:model/V1UpdateRecordRequest} body 
     * @param {module:api/RecordsApi~updateRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1UpdateRecordResponse}
     */
    updateRecord(ID, body, callback) {
      let postBody = body;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updateRecord");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRecord");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1UpdateRecordResponse;

      return this.callApi(
        '/v1/records/{ID}', 'PUT',
        pathParams, postBody,
        returnType, callback
      );
    },


}
export default RecordsApi

