/*
 * Skyflow
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

import {StreamResultOfV1GetVaultResponse} from '../model/StreamResultOfV1GetVaultResponse';
import {V1CreateVaultRequest} from '../model/V1CreateVaultRequest';
import {V1CreateVaultResponse} from '../model/V1CreateVaultResponse';
import {V1DeleteVaultResponse} from '../model/V1DeleteVaultResponse';
import {V1GetVaultResponse} from '../model/V1GetVaultResponse';
import {V1UpdateVaultRequest} from '../model/V1UpdateVaultRequest';
import {V1UpdateVaultResponse} from '../model/V1UpdateVaultResponse';

/**
* Vaults service.
* @module api/VaultsApi
* @version v1
*/
const VaultsApi = {


    /**
     * Callback function to receive the result of the createVault operation.
     * @callback module:api/VaultsApi~createVaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CreateVaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Vault
     * Creates a Vault by using Organization Information from body
     * @param {module:model/V1CreateVaultRequest} body 
     * @param {module:api/VaultsApi~createVaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CreateVaultResponse}
     */
    createVault(body, callback) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createVault");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1CreateVaultResponse;

      return this.callApi(
        '/v1/vaults', 'POST',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the deleteVault operation.
     * @callback module:api/VaultsApi~deleteVaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1DeleteVaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Vault
     * Deletes Vault and its child entities with the given ID.
     * @param {String} ID 
     * @param {module:api/VaultsApi~deleteVaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1DeleteVaultResponse}
     */
    deleteVault(ID, callback) {
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling deleteVault");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1DeleteVaultResponse;

      return this.callApi(
        '/v1/vaults/{ID}', 'DELETE',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the getVault operation.
     * @callback module:api/VaultsApi~getVaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1GetVaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Vault By ID
     * Retreives a Vault by Provided ID.
     * @param {String} ID 
     * @param {module:api/VaultsApi~getVaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1GetVaultResponse}
     */
    getVault(ID, callback) {
      let postBody = null;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling getVault");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1GetVaultResponse;

      return this.callApi(
        '/v1/vaults/{ID}', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the searchVaultsByFilter operation.
     * @callback module:api/VaultsApi~searchVaultsByFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StreamResultOfV1GetVaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Vaults
     * Streams Vaults which matches the conditions set in query parameters.
     * @param {Object} opts Optional parameters
     * @param {String} opts.offset Pagination Offset.  - indicates from which record number to start retrieving data (default to 0)
     * @param {String} opts.limit Pagination Limit.  - indicates how many records to retrieve (default to 100)
     * @param {String} opts.vaultName Vault Name.  - using which we need to fetch records
     * @param {String} opts.orgID Organization ID Under which resource should be searched.
     * @param {module:api/VaultsApi~searchVaultsByFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StreamResultOfV1GetVaultResponse}
     */
    searchVaultsByFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'vaultName': opts['vaultName'],
        'orgID': opts['orgID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StreamResultOfV1GetVaultResponse;

      return this.callApi(
        '/v1/vaults', 'GET',
        pathParams, postBody,
        returnType, callback
      );
    },

    /**
     * Callback function to receive the result of the updateVault operation.
     * @callback module:api/VaultsApi~updateVaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1UpdateVaultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Vault
     * Updates a Vault by Provided ID.
     * @param {String} ID 
     * @param {module:model/V1UpdateVaultRequest} body 
     * @param {module:api/VaultsApi~updateVaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1UpdateVaultResponse}
     */
    updateVault(ID, body, callback) {
      let postBody = body;

      // verify the required parameter 'ID' is set
      if (ID === undefined || ID === null) {
        throw new Error("Missing the required parameter 'ID' when calling updateVault");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateVault");
      }


      let pathParams = {
        'ID': ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['AppID', 'AppSecret', 'Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = V1UpdateVaultResponse;

      return this.callApi(
        '/v1/vaults/{ID}', 'PUT',
        pathParams, postBody,
        returnType, callback
      );
    },


}
export default VaultsApi

